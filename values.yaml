# Default values for jenkins.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value

Master:
  Name: jenkins-master
  Image: "jenkins/jenkins"
  ImageTag: "lts"
  ImagePullPolicy: "Always"
  Component: "jenkins-master"
  UseSecurity: true
  AdminUser: admin
# AdminPassword: <defaults to random>
  Cpu: "200m"
  Memory: "512Mi"
# Set min/max heap here if needed with:
# JavaOpts: "-Xms512m -Xmx512m"
# JenkinsOpts: ""
# JenkinsUriPrefix: "/jenkins"
  ServicePort: 80
# For minikube, set this to NodePort, elsewhere use LoadBalancer
# Use ClusterIP if your setup includes ingress controller
  ServiceType: LoadBalancer
# Master Service annotations
  ServiceAnnotations: {}
    #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https
# Used to create Ingress record (should used with ServiceType: ClusterIP)
# HostName: jenkins.cluster.local
# NodePort: <to set explicitly, choose port between 30000-32767
  ContainerPort: 8080
  SlaveListenerPort: 50000
  LoadBalancerSourceRanges:
  - 0.0.0.0/0
# Optionally assign a known public LB IP
# LoadBalancerIP: 1.2.3.4
# Optionally configure a JMX port
# requires additional JavaOpts, ie
# JavaOpts: >
#   -Dcom.sun.management.jmxremote.port=4000
#   -Dcom.sun.management.jmxremote.authenticate=false
#   -Dcom.sun.management.jmxremote.ssl=false
# JMXPort: 4000
# List of plugins to be install during Jenkins master start
  InstallPlugins:
    - ansicolor:0.5.2
    - authentication-tokens:1.3
    - blueocean-autofavorite:1.0.0
    - cloudbees-bitbucket-branch-source:2.2.3
    - blueocean-bitbucket-pipeline:1.2.4
    - bitbucket:1.1.5
    - bitbucket-pullrequest-builder:1.4.26
    - blueocean:1.2.4
    - blueocean-pipeline-editor:1.2.4
    - branch-api:2.0.11
    - blueocean-commons:1.2.4
    - blueocean-config:1.2.4
    - credentials-binding:1.13
    - credentials:2.1.16
    - blueocean-dashboard:1.2.4
    - display-url-api:2.0
    - blueocean-display-url:2.1.0
    - docker-commons:1.8
    - docker-workflow:1.13
    - durable-task:1.14
    - blueocean-events:1.2.4
    - favorite:2.3.0
    - cloudbees-folder:6.1.2
    - git-server:1.7
    - blueocean-git-pipeline:1.2.4
    - git-client:2.5.0
    - git:3.5.1
    - github-api:1.86
    - github-branch-source:2.2.3
    - blueocean-github-pipeline:1.2.4
    - github:1.28.0
    - htmlpublisher:1.14
    - icon-shim:2.0.3
    - blueocean-jira:1.2.4
    - jira:2.4.2
    - junit:1.21
    - blueocean-jwt:1.2.4
    - jackson2-api:2.7.3
    - ace-editor:1.1
    - handlebars:1.1.1
    - momentjs:1.1.1
    - jquery-detached:1.2.1
    - kubernetes:1.0
    - mailer:1.20
    - matrix-project:1.11
    - mercurial:2.1
    - blueocean-personalization:1.2.4
    - workflow-aggregator:2.5
    - pipeline-graph-analysis:1.5
    - blueocean-pipeline-scm-api:1.2.4
    - blueocean-pipeline-api-impl:1.2.4
    - workflow-api:2.20
    - workflow-basic-steps:2.6
    - pipeline-build-step:2.5.1
    - pipeline-model-declarative-agent:1.1.1
    - pipeline-model-extensions:1.1.9
    - pipeline-github-lib:1.0
    - workflow-cps:2.40
    - pipeline-input-step:2.8
    - workflow-job:2.14.1
    - pipeline-milestone-step:1.3.1
    - pipeline-model-api:1.1.9
    - pipeline-model-definition:1.1.9
    - workflow-multibranch:2.16
    - workflow-durable-task-step:2.15
    - pipeline-rest-api:2.9
    - workflow-scm-step:2.6
    - workflow-cps-global-lib:2.9
    - pipeline-stage-step:2.2
    - pipeline-stage-tags-metadata:1.1.9
    - pipeline-stage-view:2.9
    - workflow-step-api:2.13
    - workflow-support:2.14
    - plain-credentials:1.4
    - pubsub-light:1.12
    - blueocean-rest:1.2.4
    - blueocean-rest-impl:1.2.4
    - scm-api:2.2.2
    - ssh-credentials:1.13
    - script-security:1.34
    - sse-gateway:1.15
    - structs:1.10
    - token-macro:2.3
    - variant:1.1
    - blueocean-web:1.2.4
    - bouncycastle-api:2.16.2
    - blueocean-i18n:1.2.4

# Used to approve a list of groovy functions in pipelines used the script-security plugin. Can be viewed under /scriptApproval
  ScriptApproval:
    - "method groovy.json.JsonSlurperClassic parseText java.lang.String"
    - "new groovy.json.JsonSlurperClassic"
    - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods leftShift java.util.Map java.util.Map"
    - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods split java.lang.String"
# List of groovy init scripts to be executed during Jenkins master start
  InitScripts:
#  - |
#    print 'adding global pipeline libraries, register properties, bootstrap jobs...'
  CustomConfigMap: false
# Node labels and tolerations for pod assignment
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
  NodeSelector: {}
  Tolerations: {}

  Ingress:
    Annotations:
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"

    TLS:
      # - secretName: jenkins.cluster.local
      #   hosts:
      #     - jenkins.cluster.local

Agent:
  Enabled: true
  Image: jenkinsci/jnlp-slave
  ImageTag: 3.10-1
  Component: "jenkins-slave"
  Privileged: false
  Cpu: "200m"
  Memory: "256Mi"
  # You may want to change this to true while testing a new image
  AlwaysPullImage: false
  # You can define the volumes that you want to mount for this container
  # Allowed types are: ConfigMap, EmptyDir, HostPath, Nfs, Pod, Secret
  # Configure the attributes as they appear in the corresponding Java class for that type
  # https://github.com/jenkinsci/kubernetes-plugin/tree/master/src/main/java/org/csanchez/jenkins/plugins/kubernetes/volumes
  volumes:
  # - type: Secret
  #   secretName: mysecret
  #   mountPath: /var/myapp/mysecret
  NodeSelector: {}
  # Key Value selectors. Ex:
  # jenkins-agent: v1

Persistence:
  Enabled: true
  ## A manually managed Persistent Volume and Claim
  ## Requires Persistence.Enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  ExistingClaim: jenkins-home-pvc

  ## jenkins data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # StorageClass: "-"

  AccessMode: ReadWriteOnce
  Size: 8Gi
  volumes:
#  - name: nothing
#    emptyDir: {}
  mounts:
#  - mountPath: /var/nothing
#    name: nothing
#    readOnly: true

NetworkPolicy:
  # Enable creation of NetworkPolicy resources.
  Enabled: false
  # For Kubernetes v1.4, v1.5 and v1.6, use 'extensions/v1beta1'
  # For Kubernetes v1.7, use 'networking.k8s.io/v1'
  ApiVersion: extensions/v1beta1

## Install Default RBAC roles and bindings
rbac:
  install: false
  serviceAccountName: sa-jenkins
  # RBAC api version (currently either v1beta1 or v1alpha1)
  apiVersion: v1beta1
  # Cluster role reference
  roleRef: cluster-admin
